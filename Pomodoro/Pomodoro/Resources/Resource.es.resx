<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accept" xml:space="preserve">
    <value>Aceptar</value>
  </data>
  <data name="Breaks" xml:space="preserve">
    <value>Descansos</value>
  </data>
  <data name="Configurations" xml:space="preserve">
    <value>Configuraciones</value>
  </data>
  <data name="Day" xml:space="preserve">
    <value>Día</value>
  </data>
  <data name="DurationMin" xml:space="preserve">
    <value>Duración (min)</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorDeleteHistory" xml:space="preserve">
    <value>Ocurrió un error al momento de borrar el historial</value>
  </data>
  <data name="ErrorSaveConfiguration" xml:space="preserve">
    <value>Ocurrio un error al momento de guardar la configuración</value>
  </data>
  <data name="History" xml:space="preserve">
    <value>Historial</value>
  </data>
  <data name="LongBreaks" xml:space="preserve">
    <value>Tiempo de descanso largo</value>
  </data>
  <data name="LongBreakSet" xml:space="preserve">
    <value>Desacanso Largo</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Menú</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NumberPomodoro" xml:space="preserve">
    <value>Pomodoros para descanso largo</value>
  </data>
  <data name="Pomodoro" xml:space="preserve">
    <value>Pomodoro</value>
  </data>
  <data name="Pomodoros" xml:space="preserve">
    <value>Pomodoros</value>
  </data>
  <data name="QuestionDeleteHistory" xml:space="preserve">
    <value>¿Está seguro que desea borrar su historial?</value>
  </data>
  <data name="RestartHistory" xml:space="preserve">
    <value>Reiniciar Historial</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Guardar</value>
  </data>
  <data name="ShortBreaks" xml:space="preserve">
    <value>Tiempo de descanso corto</value>
  </data>
  <data name="ShortBreakSet" xml:space="preserve">
    <value>Descanso Corto</value>
  </data>
  <data name="StartPause" xml:space="preserve">
    <value>Iniciar / Pausar</value>
  </data>
  <data name="SuccessDeleteHistory" xml:space="preserve">
    <value>Se borró el historial de manera exitosa</value>
  </data>
  <data name="SuccessSaveConfiguration" xml:space="preserve">
    <value>Se guardo la configuración de manera exitosa</value>
  </data>
  <data name="SummaryDay" xml:space="preserve">
    <value>Resumen por día</value>
  </data>
  <data name="TimePomodoro" xml:space="preserve">
    <value>Tiempo de pomodoro</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Si</value>
  </data>
  <data name="BackToWork" xml:space="preserve">
    <value>hora de volver al trabajo!</value>
  </data>
  <data name="LetsGo" xml:space="preserve">
    <value>Vámos</value>
  </data>
  <data name="LongBreak" xml:space="preserve">
    <value>Ahora puedes tomarte un descanso  largo...</value>
  </data>
  <data name="ShortBreak" xml:space="preserve">
    <value>Ahora puedes tomarte un descanso  breve...</value>
  </data>
  <data name="TakeABreak" xml:space="preserve">
    <value>¡Tómate un descanso!</value>
  </data>
</root>